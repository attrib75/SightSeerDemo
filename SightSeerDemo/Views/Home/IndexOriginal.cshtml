<title>SightSeer</title>
@{ Layout = "~/Views/Shared/_Layout.cshtml";}
@model SightSeerDemo.ViewModels.HomeViewModel

@section Scripts {
    <!-- Add references to the Azure Maps Map control JavaScript and CSS files. -->
    <link rel="stylesheet" href="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.css" type="text/css" />
    <script src="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.js"></script>

}

<style>

    .marqueeStyle {
        border: 1px solid;
        border-color: lightgray;
    }

    #myMap {
        position: relative;
        width: 100%;
        min-width: 290px;
        height: 600px;
    }

    .controlPanel {
        position: absolute;
        top: 15px;
        left: 0px;
        border-radius: 5px;
        padding: 5px;
        background-color: white;
    }
</style>
<div class="text-center" id="spinner" style="margin-bottom: 20px; margin-top: -5px;">
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
</div>
<!-- Outer Most 2 Column -->
<div class="row">
    <!-- Left Column -->
    <div class="col-md-5">
        <div class="row" style="height: 100px">
            <div class="controlPanel">
                <input type="button" class="btn-primary" value="Play" onclick="play()" />
                <input type="button" class="btn-outline-warning" value="Pause" onclick="pause()" />
                <input type="button" class="btn-danger" value="Stop" onclick="stop()" />
                <br />
                Follow: <input id="followSymbol" type="checkbox" />
            </div>
        </div>

        <div class="row">
            <marquee direction="up" id="textscroll" class="marqueeStyle"
                     height='100' scrolldelay='0' scrollamount='20'>
            </marquee>
        </div>
    </div>
    <!-- Right Column -->
    <div class="col-md-7">
        <div id="myMap"></div>
    </div>
</div>

<script type='text/javascript'>

    var map, pin, datasource;
    var animationTime = 5000;
    var animation;
    var startingLeg = 0;
    var RoutePoints;

    $(document).ready(function () {
       $("#spinner").hide();

       $.ajax({
        type: "GET",
        url: "Home/GetRoutePoints",
        data: '',
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (result) {
            RoutePoints  = result;
            GetMap();
        },
        failure: function(response) {
            alert(response.d);
        }
    });
    });

    //map functions mostly taken from here:
    //https://github.com/Azure-Samples/AzureMapsCodeSamples/blob/master/AzureMapsCodeSamples/Animations/Animate%20a%20Symbol%20along%20a%20Path.html

    //Create an array of points to define a path to animate along.
    var path = [
     @{ foreach (var item in Model.RoutePoints)
     {
        @:[@item.DLong, @item.DLat, @item.LegNumber],
     }}
    ];

    function GetMap() {
        //Initialize a map instance.
        map = new atlas.Map('myMap', {
            center: [ -87.622519,41.882343],
            zoom: 13,
            view: 'Auto',

            //Add your Azure Maps subscription key to the map SDK. Get an Azure Maps key at https://azure.com/maps
            authOptions: {
                authType: 'subscriptionKey',
                subscriptionKey: '@Model.MapAPIKey'
            }
        });

        //Wait until the map resources are ready.
        map.events.add('ready', function () {

            //Load a custom image icon into the map resources.
            map.imageSprite.add('arrow-icon', 'Images/gpsArrowIcon.png').then(function () {

                //Create a data source and add it to the map.
                datasource = new atlas.source.DataSource();
                map.sources.add(datasource);

                //Create a layer to render the path.
                map.layers.add(new atlas.layer.LineLayer(datasource, null, {
                    strokeColor: 'DodgerBlue',
                    strokeWidth: 3
                }));

                //Create a line for the path and add it to the data source.
                datasource.add(new atlas.data.LineString(path));

                //Create a layer to render a symbol which we will animate.
                map.layers.add(new atlas.layer.SymbolLayer(datasource, null, {
                    iconOptions: {
                        //Pass in the id of the custom icon that was loaded into the map resources.
                        image: 'arrow-icon',

                        //Anchor the icon to the center of the image.
                        anchor: 'center',

                        //Rotate the icon based on the rotation property on the point data.
                        rotation: ['get', 'rotation'],

                        //Have the rotation align with the map.
                        rotationAlignment: 'map',

                        //For smoother animation, ignore the placement of the icon. This skips the label collision calculations and allows the icon to overlap map labels.
                        ignorePlacement: true,

                        //For smoother animation, allow symbol to overlap all other symbols on the map.
                        allowOverlap: true
                    },
                    textOptions: {
                        //For smoother animation, ignore the placement of the text. This skips the label collision calculations and allows the text to overlap map labels.
                        ignorePlacement: true,

                        //For smoother animation, allow text to overlap all other symbols on the map.
                        allowOverlap: true
                    },

                    //Only render Point or MultiPoints in this layer.
                    filter: ['any', ['==', ['geometry-type'], 'Point'], ['==', ['geometry-type'], 'MultiPoint']]
                }));

                //Create a pin and wrap with the shape class and add to data source.
                pin = new atlas.Shape(new atlas.data.Feature(new atlas.data.Point(path[0]), {
                    rotation: 180
                }));
                datasource.add(pin);

                animation = new animations.PathAnimation(path, AnimationCallback, animationTime);
            });
        });

        @for (int i = 0; i < Model.TourStops.Count ; i++)
        {
            var tourStop = Model.TourStops[i];
             @:showResultsOnMap(@tourStop.LatLong.DLat, @tourStop.LatLong.DLong, '@tourStop.Name', @i+1)
        }

    }

    function AnimationCallback(position, heading, progress) {
        //Update the rotation of the symbol.
        pin.setProperties({
            rotation: heading
        });

        //Update the symbols coordinates.
        pin.setCoordinates(position);

        console.log('AnimationCallback - Position: ' + position + ' progress: ' + progress);

        //pause at the end of each section
        for (var i = 0; i < path.length; i++) {
            if (path[i][0] === position[0] && path[i][1] === position[1]) {
                console.log('AnimationCallback Position found matching path ' + path[i]);
            }
        }

        //for (var i = 0; i < path.length; i++) {
        //    if (path[i][0] === position[0] && path[i][1] === position[1]) {
        //        if (path[i][2] > startingLeg) {
        //             startingLeg = path[i][2];
        //             stop();
        //        }
        //    }
        //}

      //  $("#textscroll").append( position );

        if (document.getElementById('followSymbol').checked) {
                        map.setCamera({
                            center: position,
                            bearing: heading,
                            pitch: 45,
                            zoom: 15
                        });
                    }
    }

     function showResultsOnMap(lat, dlong, name, index) {
        //  map.markers.clear();

        //Create an HTML marker and add it to the map.
        var marker = new atlas.HtmlMarker({
            color: 'DodgerBlue',
            text: index,
            position: [ dlong, lat],
            popup: new atlas.Popup({
                content: "<div style='padding:10px'>" + name + "</div>",
                pixelOffset: [0, -30]
            })
        });

        map.markers.add(marker);

        //Add a click event to toggle the popup.
        map.events.add('click', marker, () => {
            marker.togglePopup();
        });

    }

    function play() {
        if (animation) {
            animation.play();
        }
    }

    function pause() {
        if (animation) {
            animation.pause();
        }
    }

    function stop() {
        if (animation) {
            animation.stop();
            $("#textscroll").empty(  );
        }
    }

    var animations = (function () {
        var self = this;
        var _delay = 30; //30 = 33.3 frames per second, 16 = 62.5 frames per second

        this.PathAnimation = function (path, intervalCallback, duration) {
            /// <summary>This class extends from the BaseAnimation class and cycles through a set of positions over a period of time, calculating mid-point positions along the way.</summary>
            /// <param name="path" type="Position[]">An array of positions to cycle through.</param>
            /// <param name="intervalCallback" type="Function">A function that is called when a frame is to be rendered. This callback function recieves three values; current position, heading, progress.</param>
            /// <param name="duration" type="Number">Length of time in ms that the animation should run for. Default is 1000 ms.</param>

            var _totalDistance = 0,
                _intervalLocs = [path[0]],
                _intervalHeadings = [],
                _intervalIdx = [0],
                _frameCount = Math.ceil(duration / _delay), idx;

            var progress, dlat, dlon;

            //Calcualte the total distance along the path in degrees.
            for (var i = 0; i < path.length - 1; i++) {
                dlat = (path[i + 1][1] - path[i][1]);
                dlon = (path[i + 1][0] - path[i][0]);

                _totalDistance += Math.sqrt(dlat * dlat + dlon * dlon);
            }

            //Pre-calculate step points for smoother rendering.
            for (var f = 0; f < _frameCount; f++) {
                progress = (f * _delay) / duration;

                var travel = progress * _totalDistance;
                var alpha;
                var dist = 0;
                var dx = travel;

                for (var i = 0; i < path.length - 1; i++) {
                    dlat = (path[i + 1][1] - path[i][1]);
                    dlon = (path[i + 1][0] - path[i][0]);
                    alpha = Math.atan2(dlat * Math.PI / 180, dlon * Math.PI / 180);
                    dist += Math.sqrt(dlat * dlat + dlon * dlon);

                    if (dist >= travel) {
                        idx = i;
                        break;
                    }

                    dx = travel - dist;
                }

                if (dx != 0 && idx < path.length - 1) {
                    dlat = dx * Math.sin(alpha);
                    dlon = dx * Math.cos(alpha);

                    var dest = [path[idx][0] + dlon, path[idx][1] + dlat];

                    _intervalLocs.push(dest);
                    _intervalHeadings.push(atlas.math.getHeading(path[idx], dest));
                    _intervalIdx.push(idx);
                }
            }

            //Ensure the last location is the last position in the path.
            _intervalHeadings.push(atlas.math.getHeading(_intervalLocs[_intervalLocs.length - 1], path[path.length - 1]));
            _intervalLocs.push(path[path.length - 1]);
            _intervalIdx.push(path.length - 1);

            if (_intervalHeadings.length < _intervalLocs.length) {
                _intervalHeadings.push(_intervalHeadings[_intervalHeadings.length - 1]);
            }

            return new self.BaseAnimation(
                function (progress, frameIdx) {

                    if (intervalCallback) {
                        intervalCallback(_intervalLocs[frameIdx], _intervalHeadings[frameIdx], progress);
                    }
                }, duration);
        }

        this.BaseAnimation = function (renderFrameCallback, duration) {
            /// <summary>A base class that can be used to create animations that support play, pause and stop.</summary>
            /// <param name="renderFrameCallback" type="Function">A function that is called when a frame is to be rendered. This function recieves two values; progress and frameIdx.</param>
            /// <param name="duration" type="Number">Length of time in ms that the animation should run for. Default is 1000 ms.</param>

            var _timerId,
                frameIdx = 0,
                _isPaused = true;

            //Varify value
            duration = (duration && duration > 0) ? duration : 1000;

            this.play = function () {
                if (renderFrameCallback) {
                    _isPaused = false;

                    if (!_timerId) {
                        _timerId = setInterval(function () {
                            if (!_isPaused) {
                                var progress = (frameIdx * _delay) / duration;

                                renderFrameCallback(progress, frameIdx);

                                if (progress >= 1) {
                                    reset();
                                }

                                frameIdx++;
                            }
                        }, _delay);
                    }
                }
            };

            this.isPlaying = function () {
                return !_isPaused;
            };

            this.pause = function () {
                _isPaused = true;
            };

            this.stop = function () {
                reset();
            };

            function reset() {
                if (_timerId != null) {
                    clearInterval(_timerId);
                    _timerId = null;
                }

                frameIdx = 0;

                renderFrameCallback(0, frameIdx);
                _isPaused = true;
            }
        }

        return self;
    })();
</script>